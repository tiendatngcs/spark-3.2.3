== Physical Plan ==
TakeOrderedAndProject (126)
+- * HashAggregate (125)
   +- Exchange (124)
      +- * HashAggregate (123)
         +- * Expand (122)
            +- Union (121)
               :- * Project (82)
               :  +- * Filter (81)
               :     +- * HashAggregate (80)
               :        +- Exchange (79)
               :           +- * HashAggregate (78)
               :              +- * Project (77)
               :                 +- * BroadcastHashJoin Inner BuildRight (76)
               :                    :- * Project (66)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (65)
               :                    :     :- * SortMergeJoin LeftSemi (63)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (62)
               :                    :     :     +- Exchange (61)
               :                    :     :        +- * Project (60)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (59)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (58)
               :                    :     :                 +- * HashAggregate (57)
               :                    :     :                    +- Exchange (56)
               :                    :     :                       +- * HashAggregate (55)
               :                    :     :                          +- * SortMergeJoin LeftSemi (54)
               :                    :     :                             :- * Sort (42)
               :                    :     :                             :  +- Exchange (41)
               :                    :     :                             :     +- * HashAggregate (40)
               :                    :     :                             :        +- Exchange (39)
               :                    :     :                             :           +- * HashAggregate (38)
               :                    :     :                             :              +- * Project (37)
               :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (36)
               :                    :     :                             :                    :- * Project (14)
               :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
               :                    :     :                             :                    :     :- * Filter (11)
               :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
               :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                             :                    :     +- ReusedExchange (12)
               :                    :     :                             :                    +- BroadcastExchange (35)
               :                    :     :                             :                       +- * SortMergeJoin LeftSemi (34)
               :                    :     :                             :                          :- * Sort (19)
               :                    :     :                             :                          :  +- Exchange (18)
               :                    :     :                             :                          :     +- * Filter (17)
               :                    :     :                             :                          :        +- * ColumnarToRow (16)
               :                    :     :                             :                          :           +- Scan parquet default.item (15)
               :                    :     :                             :                          +- * Sort (33)
               :                    :     :                             :                             +- Exchange (32)
               :                    :     :                             :                                +- * Project (31)
               :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (30)
               :                    :     :                             :                                      :- * Project (25)
               :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :     :                             :                                      :     :- * Filter (22)
               :                    :     :                             :                                      :     :  +- * ColumnarToRow (21)
               :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (20)
               :                    :     :                             :                                      :     +- ReusedExchange (23)
               :                    :     :                             :                                      +- BroadcastExchange (29)
               :                    :     :                             :                                         +- * Filter (28)
               :                    :     :                             :                                            +- * ColumnarToRow (27)
               :                    :     :                             :                                               +- Scan parquet default.item (26)
               :                    :     :                             +- * Sort (53)
               :                    :     :                                +- Exchange (52)
               :                    :     :                                   +- * Project (51)
               :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (50)
               :                    :     :                                         :- * Project (48)
               :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :     :                                         :     :- * Filter (45)
               :                    :     :                                         :     :  +- * ColumnarToRow (44)
               :                    :     :                                         :     :     +- Scan parquet default.web_sales (43)
               :                    :     :                                         :     +- ReusedExchange (46)
               :                    :     :                                         +- ReusedExchange (49)
               :                    :     +- ReusedExchange (64)
               :                    +- BroadcastExchange (75)
               :                       +- * SortMergeJoin LeftSemi (74)
               :                          :- * Sort (71)
               :                          :  +- Exchange (70)
               :                          :     +- * Filter (69)
               :                          :        +- * ColumnarToRow (68)
               :                          :           +- Scan parquet default.item (67)
               :                          +- * Sort (73)
               :                             +- ReusedExchange (72)
               :- * Project (101)
               :  +- * Filter (100)
               :     +- * HashAggregate (99)
               :        +- Exchange (98)
               :           +- * HashAggregate (97)
               :              +- * Project (96)
               :                 +- * BroadcastHashJoin Inner BuildRight (95)
               :                    :- * Project (93)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (92)
               :                    :     :- * SortMergeJoin LeftSemi (90)
               :                    :     :  :- * Sort (87)
               :                    :     :  :  +- Exchange (86)
               :                    :     :  :     +- * Filter (85)
               :                    :     :  :        +- * ColumnarToRow (84)
               :                    :     :  :           +- Scan parquet default.catalog_sales (83)
               :                    :     :  +- * Sort (89)
               :                    :     :     +- ReusedExchange (88)
               :                    :     +- ReusedExchange (91)
               :                    +- ReusedExchange (94)
               +- * Project (120)
                  +- * Filter (119)
                     +- * HashAggregate (118)
                        +- Exchange (117)
                           +- * HashAggregate (116)
                              +- * Project (115)
                                 +- * BroadcastHashJoin Inner BuildRight (114)
                                    :- * Project (112)
                                    :  +- * BroadcastHashJoin Inner BuildRight (111)
                                    :     :- * SortMergeJoin LeftSemi (109)
                                    :     :  :- * Sort (106)
                                    :     :  :  +- Exchange (105)
                                    :     :  :     +- * Filter (104)
                                    :     :  :        +- * ColumnarToRow (103)
                                    :     :  :           +- Scan parquet default.web_sales (102)
                                    :     :  +- * Sort (108)
                                    :     :     +- ReusedExchange (107)
                                    :     +- ReusedExchange (110)
                                    +- ReusedExchange (113)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(12) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#13]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(15) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(18) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(23) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#20]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(26) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(29) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(32) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(41) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(46) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#30]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(52) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=8]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join condition: None

(55) HashAggregate [codegen id : 18]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(56) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(57) HashAggregate [codegen id : 19]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(58) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=10]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join condition: None

(60) Project [codegen id : 20]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(61) Exchange
Input [1]: [ss_item_sk#35]
Arguments: hashpartitioning(ss_item_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(62) Sort [codegen id : 21]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(64) ReusedExchange [Reuses operator id: 150]
Output [1]: [d_date_sk#36]

(65) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join condition: None

(66) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(67) Scan parquet default.item
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(68) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(69) Filter [codegen id : 23]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Condition : isnotnull(i_item_sk#37)

(70) Exchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: hashpartitioning(i_item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(71) Sort [codegen id : 24]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: [i_item_sk#37 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#35]

(73) Sort [codegen id : 43]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#37]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(75) BroadcastExchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

(76) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join condition: None

(77) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(78) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(79) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(80) HashAggregate [codegen id : 46]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47, count(1)#48]
Results [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 AS sales#49, count(1)#48 AS number_sales#50]

(81) Filter [codegen id : 46]
Input [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sales#49, number_sales#50]
Condition : (isnotnull(sales#49) AND (cast(sales#49 as decimal(32,6)) > cast(Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(82) Project [codegen id : 46]
Output [6]: [sales#49, number_sales#50, store AS channel#53, i_brand_id#38 AS i_brand_id#54, i_class_id#39 AS i_class_id#55, i_category_id#40 AS i_category_id#56]
Input [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sales#49, number_sales#50]

(83) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#60), dynamicpruningexpression(cs_sold_date_sk#60 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 47]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]

(85) Filter [codegen id : 47]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Condition : isnotnull(cs_item_sk#57)

(86) Exchange
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Arguments: hashpartitioning(cs_item_sk#57, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(87) Sort [codegen id : 48]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Arguments: [cs_item_sk#57 ASC NULLS FIRST], false, 0

(88) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#35]

(89) Sort [codegen id : 67]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(91) ReusedExchange [Reuses operator id: 150]
Output [1]: [d_date_sk#61]

(92) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#61]
Join condition: None

(93) Project [codegen id : 91]
Output [3]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59]
Input [5]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, d_date_sk#61]

(94) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(95) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [i_item_sk#62]
Join condition: None

(96) Project [codegen id : 91]
Output [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [7]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(97) HashAggregate [codegen id : 91]
Input [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#63, i_class_id#64, i_category_id#65]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#59 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#66, isEmpty#67, count#68]
Results [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#69, isEmpty#70, count#71]

(98) Exchange
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#69, isEmpty#70, count#71]
Arguments: hashpartitioning(i_brand_id#63, i_class_id#64, i_category_id#65, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(99) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#69, isEmpty#70, count#71]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#59 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#72, count(1)#73]
Results [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#72 AS sales#74, count(1)#73 AS number_sales#75]

(100) Filter [codegen id : 92]
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#74, number_sales#75]
Condition : (isnotnull(sales#74) AND (cast(sales#74 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(101) Project [codegen id : 92]
Output [6]: [sales#74, number_sales#75, catalog AS channel#76, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#74, number_sales#75]

(102) Scan parquet default.web_sales
Output [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 93]
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]

(104) Filter [codegen id : 93]
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Condition : isnotnull(ws_item_sk#77)

(105) Exchange
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Arguments: hashpartitioning(ws_item_sk#77, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(106) Sort [codegen id : 94]
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Arguments: [ws_item_sk#77 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#35]

(108) Sort [codegen id : 113]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#77]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(110) ReusedExchange [Reuses operator id: 150]
Output [1]: [d_date_sk#81]

(111) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_sold_date_sk#80]
Right keys [1]: [d_date_sk#81]
Join condition: None

(112) Project [codegen id : 137]
Output [3]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79]
Input [5]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80, d_date_sk#81]

(113) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#82, i_brand_id#83, i_class_id#84, i_category_id#85]

(114) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#77]
Right keys [1]: [i_item_sk#82]
Join condition: None

(115) Project [codegen id : 137]
Output [5]: [ws_quantity#78, ws_list_price#79, i_brand_id#83, i_class_id#84, i_category_id#85]
Input [7]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, i_item_sk#82, i_brand_id#83, i_class_id#84, i_category_id#85]

(116) HashAggregate [codegen id : 137]
Input [5]: [ws_quantity#78, ws_list_price#79, i_brand_id#83, i_class_id#84, i_category_id#85]
Keys [3]: [i_brand_id#83, i_class_id#84, i_category_id#85]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#79 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, count#88]
Results [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#89, isEmpty#90, count#91]

(117) Exchange
Input [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#89, isEmpty#90, count#91]
Arguments: hashpartitioning(i_brand_id#83, i_class_id#84, i_category_id#85, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(118) HashAggregate [codegen id : 138]
Input [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#89, isEmpty#90, count#91]
Keys [3]: [i_brand_id#83, i_class_id#84, i_category_id#85]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#79 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#79 as decimal(12,2)))), DecimalType(18,2), true))#92, count(1)#93]
Results [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#79 as decimal(12,2)))), DecimalType(18,2), true))#92 AS sales#94, count(1)#93 AS number_sales#95]

(119) Filter [codegen id : 138]
Input [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sales#94, number_sales#95]
Condition : (isnotnull(sales#94) AND (cast(sales#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(120) Project [codegen id : 138]
Output [6]: [sales#94, number_sales#95, web AS channel#96, i_brand_id#83, i_class_id#84, i_category_id#85]
Input [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sales#94, number_sales#95]

(121) Union

(122) Expand [codegen id : 139]
Input [6]: [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [[sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56, 0], [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, null, 1], [sales#49, number_sales#50, channel#53, i_brand_id#54, null, null, 3], [sales#49, number_sales#50, channel#53, null, null, null, 7], [sales#49, number_sales#50, null, null, null, null, 15]], [sales#49, number_sales#50, channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]

(123) HashAggregate [codegen id : 139]
Input [7]: [sales#49, number_sales#50, channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Keys [5]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Functions [2]: [partial_sum(sales#49), partial_sum(number_sales#50)]
Aggregate Attributes [3]: [sum#102, isEmpty#103, sum#104]
Results [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]

(124) Exchange
Input [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]
Arguments: hashpartitioning(channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(125) HashAggregate [codegen id : 140]
Input [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]
Keys [5]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Functions [2]: [sum(sales#49), sum(number_sales#50)]
Aggregate Attributes [2]: [sum(sales#49)#108, sum(number_sales#50)#109]
Results [6]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales#49)#108 AS sum(sales)#110, sum(number_sales#50)#109 AS sum(number_sales)#111]

(126) TakeOrderedAndProject
Input [6]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales)#110, sum(number_sales)#111]
Arguments: 100, [channel#97 ASC NULLS FIRST, i_brand_id#98 ASC NULLS FIRST, i_class_id#99 ASC NULLS FIRST, i_category_id#100 ASC NULLS FIRST], [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales)#110, sum(number_sales)#111]

===== Subqueries =====

Subquery:1 Hosting operator id = 81 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* HashAggregate (145)
+- Exchange (144)
   +- * HashAggregate (143)
      +- Union (142)
         :- * Project (131)
         :  +- * BroadcastHashJoin Inner BuildRight (130)
         :     :- * ColumnarToRow (128)
         :     :  +- Scan parquet default.store_sales (127)
         :     +- ReusedExchange (129)
         :- * Project (136)
         :  +- * BroadcastHashJoin Inner BuildRight (135)
         :     :- * ColumnarToRow (133)
         :     :  +- Scan parquet default.catalog_sales (132)
         :     +- ReusedExchange (134)
         +- * Project (141)
            +- * BroadcastHashJoin Inner BuildRight (140)
               :- * ColumnarToRow (138)
               :  +- Scan parquet default.web_sales (137)
               +- ReusedExchange (139)


(127) Scan parquet default.store_sales
Output [3]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#114), dynamicpruningexpression(ss_sold_date_sk#114 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114]

(129) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#115]

(130) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#114]
Right keys [1]: [d_date_sk#115]
Join condition: None

(131) Project [codegen id : 2]
Output [2]: [ss_quantity#112 AS quantity#116, ss_list_price#113 AS list_price#117]
Input [4]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114, d_date_sk#115]

(132) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#120), dynamicpruningexpression(cs_sold_date_sk#120 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120]

(134) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#121]

(135) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#120]
Right keys [1]: [d_date_sk#121]
Join condition: None

(136) Project [codegen id : 4]
Output [2]: [cs_quantity#118 AS quantity#122, cs_list_price#119 AS list_price#123]
Input [4]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120, d_date_sk#121]

(137) Scan parquet default.web_sales
Output [3]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#126), dynamicpruningexpression(ws_sold_date_sk#126 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(138) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126]

(139) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#127]

(140) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#126]
Right keys [1]: [d_date_sk#127]
Join condition: None

(141) Project [codegen id : 6]
Output [2]: [ws_quantity#124 AS quantity#128, ws_list_price#125 AS list_price#129]
Input [4]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126, d_date_sk#127]

(142) Union

(143) HashAggregate [codegen id : 7]
Input [2]: [quantity#116, list_price#117]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#116 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#117 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#130, count#131]
Results [2]: [sum#132, count#133]

(144) Exchange
Input [2]: [sum#132, count#133]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(145) HashAggregate [codegen id : 8]
Input [2]: [sum#132, count#133]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#116 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#117 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#116 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#117 as decimal(12,2)))), DecimalType(18,2), true))#134]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#116 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#117 as decimal(12,2)))), DecimalType(18,2), true))#134 AS average_sales#135]

Subquery:2 Hosting operator id = 127 Hosting Expression = ss_sold_date_sk#114 IN dynamicpruning#12

Subquery:3 Hosting operator id = 132 Hosting Expression = cs_sold_date_sk#120 IN dynamicpruning#12

Subquery:4 Hosting operator id = 137 Hosting Expression = ws_sold_date_sk#126 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (150)
+- * Project (149)
   +- * Filter (148)
      +- * ColumnarToRow (147)
         +- Scan parquet default.date_dim (146)


(146) Scan parquet default.date_dim
Output [3]: [d_date_sk#36, d_year#136, d_moy#137]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(147) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#136, d_moy#137]

(148) Filter [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#136, d_moy#137]
Condition : ((((isnotnull(d_year#136) AND isnotnull(d_moy#137)) AND (d_year#136 = 2001)) AND (d_moy#137 = 11)) AND isnotnull(d_date_sk#36))

(149) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#136, d_moy#137]

(150) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (155)
+- * Project (154)
   +- * Filter (153)
      +- * ColumnarToRow (152)
         +- Scan parquet default.date_dim (151)


(151) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#138]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(152) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#138]

(153) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#138]
Condition : (((isnotnull(d_year#138) AND (d_year#138 >= 1999)) AND (d_year#138 <= 2001)) AND isnotnull(d_date_sk#13))

(154) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#138]

(155) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=22]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 100 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:10 Hosting operator id = 83 Hosting Expression = cs_sold_date_sk#60 IN dynamicpruning#5

Subquery:11 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:12 Hosting operator id = 102 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#5


