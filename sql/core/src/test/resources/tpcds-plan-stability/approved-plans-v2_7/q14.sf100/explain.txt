== Physical Plan ==
TakeOrderedAndProject (102)
+- * BroadcastHashJoin Inner BuildRight (101)
   :- * Filter (81)
   :  +- * HashAggregate (80)
   :     +- Exchange (79)
   :        +- * HashAggregate (78)
   :           +- * Project (77)
   :              +- * BroadcastHashJoin Inner BuildRight (76)
   :                 :- * Project (66)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (65)
   :                 :     :- * SortMergeJoin LeftSemi (63)
   :                 :     :  :- * Sort (5)
   :                 :     :  :  +- Exchange (4)
   :                 :     :  :     +- * Filter (3)
   :                 :     :  :        +- * ColumnarToRow (2)
   :                 :     :  :           +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (62)
   :                 :     :     +- Exchange (61)
   :                 :     :        +- * Project (60)
   :                 :     :           +- * BroadcastHashJoin Inner BuildRight (59)
   :                 :     :              :- * Filter (8)
   :                 :     :              :  +- * ColumnarToRow (7)
   :                 :     :              :     +- Scan parquet default.item (6)
   :                 :     :              +- BroadcastExchange (58)
   :                 :     :                 +- * HashAggregate (57)
   :                 :     :                    +- Exchange (56)
   :                 :     :                       +- * HashAggregate (55)
   :                 :     :                          +- * SortMergeJoin LeftSemi (54)
   :                 :     :                             :- * Sort (42)
   :                 :     :                             :  +- Exchange (41)
   :                 :     :                             :     +- * HashAggregate (40)
   :                 :     :                             :        +- Exchange (39)
   :                 :     :                             :           +- * HashAggregate (38)
   :                 :     :                             :              +- * Project (37)
   :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (36)
   :                 :     :                             :                    :- * Project (14)
   :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
   :                 :     :                             :                    :     :- * Filter (11)
   :                 :     :                             :                    :     :  +- * ColumnarToRow (10)
   :                 :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
   :                 :     :                             :                    :     +- ReusedExchange (12)
   :                 :     :                             :                    +- BroadcastExchange (35)
   :                 :     :                             :                       +- * SortMergeJoin LeftSemi (34)
   :                 :     :                             :                          :- * Sort (19)
   :                 :     :                             :                          :  +- Exchange (18)
   :                 :     :                             :                          :     +- * Filter (17)
   :                 :     :                             :                          :        +- * ColumnarToRow (16)
   :                 :     :                             :                          :           +- Scan parquet default.item (15)
   :                 :     :                             :                          +- * Sort (33)
   :                 :     :                             :                             +- Exchange (32)
   :                 :     :                             :                                +- * Project (31)
   :                 :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (30)
   :                 :     :                             :                                      :- * Project (25)
   :                 :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
   :                 :     :                             :                                      :     :- * Filter (22)
   :                 :     :                             :                                      :     :  +- * ColumnarToRow (21)
   :                 :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (20)
   :                 :     :                             :                                      :     +- ReusedExchange (23)
   :                 :     :                             :                                      +- BroadcastExchange (29)
   :                 :     :                             :                                         +- * Filter (28)
   :                 :     :                             :                                            +- * ColumnarToRow (27)
   :                 :     :                             :                                               +- Scan parquet default.item (26)
   :                 :     :                             +- * Sort (53)
   :                 :     :                                +- Exchange (52)
   :                 :     :                                   +- * Project (51)
   :                 :     :                                      +- * BroadcastHashJoin Inner BuildRight (50)
   :                 :     :                                         :- * Project (48)
   :                 :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (47)
   :                 :     :                                         :     :- * Filter (45)
   :                 :     :                                         :     :  +- * ColumnarToRow (44)
   :                 :     :                                         :     :     +- Scan parquet default.web_sales (43)
   :                 :     :                                         :     +- ReusedExchange (46)
   :                 :     :                                         +- ReusedExchange (49)
   :                 :     +- ReusedExchange (64)
   :                 +- BroadcastExchange (75)
   :                    +- * SortMergeJoin LeftSemi (74)
   :                       :- * Sort (71)
   :                       :  +- Exchange (70)
   :                       :     +- * Filter (69)
   :                       :        +- * ColumnarToRow (68)
   :                       :           +- Scan parquet default.item (67)
   :                       +- * Sort (73)
   :                          +- ReusedExchange (72)
   +- BroadcastExchange (100)
      +- * Filter (99)
         +- * HashAggregate (98)
            +- Exchange (97)
               +- * HashAggregate (96)
                  +- * Project (95)
                     +- * BroadcastHashJoin Inner BuildRight (94)
                        :- * Project (92)
                        :  +- * BroadcastHashJoin Inner BuildRight (91)
                        :     :- * SortMergeJoin LeftSemi (89)
                        :     :  :- * Sort (86)
                        :     :  :  +- Exchange (85)
                        :     :  :     +- * Filter (84)
                        :     :  :        +- * ColumnarToRow (83)
                        :     :  :           +- Scan parquet default.store_sales (82)
                        :     :  +- * Sort (88)
                        :     :     +- ReusedExchange (87)
                        :     +- ReusedExchange (90)
                        +- ReusedExchange (93)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(12) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#13]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(15) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(18) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(23) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#20]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(26) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(29) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(32) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(41) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(46) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#30]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(52) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=8]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join condition: None

(55) HashAggregate [codegen id : 18]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(56) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(57) HashAggregate [codegen id : 19]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(58) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=10]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join condition: None

(60) Project [codegen id : 20]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(61) Exchange
Input [1]: [ss_item_sk#35]
Arguments: hashpartitioning(ss_item_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(62) Sort [codegen id : 21]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(64) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#36]

(65) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join condition: None

(66) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(67) Scan parquet default.item
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(68) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(69) Filter [codegen id : 23]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Condition : (((isnotnull(i_item_sk#37) AND isnotnull(i_brand_id#38)) AND isnotnull(i_class_id#39)) AND isnotnull(i_category_id#40))

(70) Exchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: hashpartitioning(i_item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(71) Sort [codegen id : 24]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: [i_item_sk#37 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#35]

(73) Sort [codegen id : 43]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#37]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(75) BroadcastExchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

(76) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join condition: None

(77) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(78) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(79) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(80) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 AS sales#50, count(1)#48 AS number_sales#51]

(81) Filter [codegen id : 92]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(82) Scan parquet default.store_sales
Output [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#57), dynamicpruningexpression(ss_sold_date_sk#57 IN dynamicpruning#58)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 46]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]

(84) Filter [codegen id : 46]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Condition : isnotnull(ss_item_sk#54)

(85) Exchange
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Arguments: hashpartitioning(ss_item_sk#54, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(86) Sort [codegen id : 47]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Arguments: [ss_item_sk#54 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#35]

(88) Sort [codegen id : 66]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(90) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#59]

(91) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_sold_date_sk#57]
Right keys [1]: [d_date_sk#59]
Join condition: None

(92) Project [codegen id : 90]
Output [3]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56]
Input [5]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57, d_date_sk#59]

(93) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#60, i_brand_id#61, i_class_id#62, i_category_id#63]

(94) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [i_item_sk#60]
Join condition: None

(95) Project [codegen id : 90]
Output [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#61, i_class_id#62, i_category_id#63]
Input [7]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, i_item_sk#60, i_brand_id#61, i_class_id#62, i_category_id#63]

(96) HashAggregate [codegen id : 90]
Input [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#61, i_class_id#62, i_category_id#63]
Keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#56 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]

(97) Exchange
Input [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#61, i_class_id#62, i_category_id#63, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(98) HashAggregate [codegen id : 91]
Input [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#56 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#56 as decimal(12,2)))), DecimalType(18,2), true))#70, count(1)#71]
Results [6]: [store AS channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#56 as decimal(12,2)))), DecimalType(18,2), true))#70 AS sales#73, count(1)#71 AS number_sales#74]

(99) Filter [codegen id : 91]
Input [6]: [channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Condition : (isnotnull(sales#73) AND (cast(sales#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(100) BroadcastExchange
Input [6]: [channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=17]

(101) BroadcastHashJoin [codegen id : 92]
Left keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Right keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Join condition: None

(102) TakeOrderedAndProject
Input [12]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51, channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Arguments: 100, [i_brand_id#38 ASC NULLS FIRST, i_class_id#39 ASC NULLS FIRST, i_category_id#40 ASC NULLS FIRST], [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51, channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]

===== Subqueries =====

Subquery:1 Hosting operator id = 81 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (121)
+- Exchange (120)
   +- * HashAggregate (119)
      +- Union (118)
         :- * Project (107)
         :  +- * BroadcastHashJoin Inner BuildRight (106)
         :     :- * ColumnarToRow (104)
         :     :  +- Scan parquet default.store_sales (103)
         :     +- ReusedExchange (105)
         :- * Project (112)
         :  +- * BroadcastHashJoin Inner BuildRight (111)
         :     :- * ColumnarToRow (109)
         :     :  +- Scan parquet default.catalog_sales (108)
         :     +- ReusedExchange (110)
         +- * Project (117)
            +- * BroadcastHashJoin Inner BuildRight (116)
               :- * ColumnarToRow (114)
               :  +- Scan parquet default.web_sales (113)
               +- ReusedExchange (115)


(103) Scan parquet default.store_sales
Output [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#77), dynamicpruningexpression(ss_sold_date_sk#77 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(104) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]

(105) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#78]

(106) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#77]
Right keys [1]: [d_date_sk#78]
Join condition: None

(107) Project [codegen id : 2]
Output [2]: [ss_quantity#75 AS quantity#79, ss_list_price#76 AS list_price#80]
Input [4]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77, d_date_sk#78]

(108) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#83), dynamicpruningexpression(cs_sold_date_sk#83 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]

(110) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#84]

(111) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#83]
Right keys [1]: [d_date_sk#84]
Join condition: None

(112) Project [codegen id : 4]
Output [2]: [cs_quantity#81 AS quantity#85, cs_list_price#82 AS list_price#86]
Input [4]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83, d_date_sk#84]

(113) Scan parquet default.web_sales
Output [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(114) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]

(115) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#90]

(116) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#89]
Right keys [1]: [d_date_sk#90]
Join condition: None

(117) Project [codegen id : 6]
Output [2]: [ws_quantity#87 AS quantity#91, ws_list_price#88 AS list_price#92]
Input [4]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, d_date_sk#90]

(118) Union

(119) HashAggregate [codegen id : 7]
Input [2]: [quantity#79, list_price#80]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#93, count#94]
Results [2]: [sum#95, count#96]

(120) Exchange
Input [2]: [sum#95, count#96]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(121) HashAggregate [codegen id : 8]
Input [2]: [sum#95, count#96]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))#97]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))#97 AS average_sales#98]

Subquery:2 Hosting operator id = 103 Hosting Expression = ss_sold_date_sk#77 IN dynamicpruning#12

Subquery:3 Hosting operator id = 108 Hosting Expression = cs_sold_date_sk#83 IN dynamicpruning#12

Subquery:4 Hosting operator id = 113 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#36, d_week_seq#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#36, d_week_seq#99]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#36, d_week_seq#99]
Condition : ((isnotnull(d_week_seq#99) AND (d_week_seq#99 = Subquery scalar-subquery#100, [id=#101])) AND isnotnull(d_date_sk#36))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [2]: [d_date_sk#36, d_week_seq#99]

(126) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

Subquery:6 Hosting operator id = 124 Hosting Expression = Subquery scalar-subquery#100, [id=#101]
* Project (130)
+- * Filter (129)
   +- * ColumnarToRow (128)
      +- Scan parquet default.date_dim (127)


(127) Scan parquet default.date_dim
Output [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(128) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

(129) Filter [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Condition : (((((isnotnull(d_year#103) AND isnotnull(d_moy#104)) AND isnotnull(d_dom#105)) AND (d_year#103 = 1999)) AND (d_moy#104 = 12)) AND (d_dom#105 = 16))

(130) Project [codegen id : 1]
Output [1]: [d_week_seq#102]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

Subquery:7 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (135)
+- * Project (134)
   +- * Filter (133)
      +- * ColumnarToRow (132)
         +- Scan parquet default.date_dim (131)


(131) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(132) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#106]

(133) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#106]
Condition : (((isnotnull(d_year#106) AND (d_year#106 >= 1998)) AND (d_year#106 <= 2000)) AND isnotnull(d_date_sk#13))

(134) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#106]

(135) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:8 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:9 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:10 Hosting operator id = 99 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:11 Hosting operator id = 82 Hosting Expression = ss_sold_date_sk#57 IN dynamicpruning#58
BroadcastExchange (140)
+- * Project (139)
   +- * Filter (138)
      +- * ColumnarToRow (137)
         +- Scan parquet default.date_dim (136)


(136) Scan parquet default.date_dim
Output [2]: [d_date_sk#59, d_week_seq#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(137) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#59, d_week_seq#107]

(138) Filter [codegen id : 1]
Input [2]: [d_date_sk#59, d_week_seq#107]
Condition : ((isnotnull(d_week_seq#107) AND (d_week_seq#107 = Subquery scalar-subquery#108, [id=#109])) AND isnotnull(d_date_sk#59))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#59]
Input [2]: [d_date_sk#59, d_week_seq#107]

(140) BroadcastExchange
Input [1]: [d_date_sk#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:12 Hosting operator id = 138 Hosting Expression = Subquery scalar-subquery#108, [id=#109]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Condition : (((((isnotnull(d_year#111) AND isnotnull(d_moy#112)) AND isnotnull(d_dom#113)) AND (d_year#111 = 1998)) AND (d_moy#112 = 12)) AND (d_dom#113 = 16))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#110]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]


